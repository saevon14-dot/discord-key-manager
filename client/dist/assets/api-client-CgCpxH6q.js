const h=window.location.hostname.includes("github.io");class d{constructor(){this.mockData={botStatus:{online:!1,uptime:0,serverCount:0,latency:-1,lastStarted:new Date().toISOString()},dashboardStats:{totalKeys:0,todayGenerated:0,activeRoles:0,uptime:0,keyPools:{day:0,week:0,month:0,"3month":0,"6month":0,lifetime:0,custom:0}},roles:[],keys:[],settings:[],logs:[]},this.storage={get:e=>{const s=localStorage.getItem(`discord-keys-${e}`);return s?JSON.parse(s):null},set:(e,s)=>{localStorage.setItem(`discord-keys-${e}`,JSON.stringify(s))}}}async request(e,s={}){if(!h){const o=await fetch(`/api${e}`,s);if(!o.ok)throw new Error(`API Error: ${o.status}`);return o.json()}const t=s.method||"GET",[,a,r]=e.split("/");switch(t){case"GET":return this.handleGet(a,r,e);case"POST":return this.handlePost(a,r,s.body);case"DELETE":return this.handleDelete(a,r,e);default:return this.mockData}}handleGet(e,s,t){switch(e){case"bot":if(s==="status")return this.storage.get("botStatus")||this.mockData.botStatus;break;case"dashboard":if(s==="stats")return this.storage.get("dashboardStats")||this.mockData.dashboardStats;break;case"roles":return this.storage.get("roles")||this.mockData.roles;case"keys":const a=this.storage.get("keys")||this.mockData.keys;if(t!=null&&t.includes("type=")){const r=t.split("type=")[1];return a.filter(o=>o.type===r)}return a;case"settings":return this.storage.get("settings")||this.mockData.settings;case"logs":return this.storage.get("logs")||this.mockData.logs;default:return{}}}handlePost(e,s,t){const a=t?JSON.parse(t):{};switch(e){case"bot":if(s==="start"){const c={...this.mockData.botStatus,online:!0,lastStarted:new Date().toISOString()};return this.storage.set("botStatus",c),{success:!0,message:"Bot started successfully (GitHub Pages Demo)"}}if(s==="stop"){const c={...this.mockData.botStatus,online:!1};return this.storage.set("botStatus",c),{success:!0,message:"Bot stopped successfully (GitHub Pages Demo)"}}break;case"roles":const r=this.storage.get("roles")||[],o={id:Math.random().toString(36).substr(2,9),...a,createdAt:new Date().toISOString()};return r.push(o),this.storage.set("roles",r),o;case"keys":const i=this.storage.get("keys")||[],n=a.keys.map(c=>({id:Math.random().toString(36).substr(2,9),...c,status:"available",createdAt:new Date().toISOString(),usedAt:null,usedBy:null}));return i.push(...n),this.storage.set("keys",i),n;case"settings":const u=this.storage.get("settings")||[],g=u.findIndex(c=>c.key===a.key),l={id:Math.random().toString(36).substr(2,9),...a,updatedAt:new Date().toISOString()};return g>=0?u[g]=l:u.push(l),this.storage.set("settings",u),l;default:return{success:!0}}}handleDelete(e,s,t){switch(e){case"keys":const a=t==null?void 0:t.split("/").pop();if(a){const i=(this.storage.get("keys")||[]).filter(n=>n.id!==a);return this.storage.set("keys",i),{success:!0}}break;case"roles":const r=t==null?void 0:t.split("/").pop();if(r){const i=(this.storage.get("roles")||[]).filter(n=>n.id!==r);return this.storage.set("roles",i),{success:!0}}break;default:return{success:!0}}}}const y=new d;export{d as GitHubPagesApiClient,y as apiClient};
//# sourceMappingURL=api-client-CgCpxH6q.js.map
